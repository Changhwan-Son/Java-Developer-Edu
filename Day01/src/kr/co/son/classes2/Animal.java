package kr.co.son.classes2;

// 상속이란?
// * 부모클래스의 속성과 메소드를 자식클래스가 물려받는 
// * 재사용 

// 상속의 키워드 : extends
// extends : 상속 x 확장 O

// 확장 : 기본(베이스)이 있고, 여기에다가 추가적인 기능을 만들어 내는 것 
// 게임에서 확장판 스타크래프트 오리지널 -> 브루드워가 나옴 


// 상속을 언제 쓰는가?
// -> 하나의 카테고리를 만들고 그 카테고리로부터 여러 클래스를 가지쳐야 할 때 
// -> 코드의 재사용이 가능하고, 기존 클래스로부터 기본 기능을 갖추고 있기 때문에 개발 속도가 빨라진다. 


// 상속을 잘 쓰려면?
// 	-> 내가 만들고자 하는 클래스들의 공통 기능을 생각할 것 
// 	-> 내가 만들고자 하는 클래스들의 "공통 속성"을 생각할 것 

// 상속은 강결합 -> IS A 관계라고 한다 

// 다형성 ? 어떠한 의미 하나가 다른 여러가지 의미를 내포할 수 있는 것 

// 메소드 다형성  ( override )
// 열다 -> 경기를 열다. 봉투를 열다. 창문을 열다. 

// 클래스 다형성 (extends )
// 동물 -> 토끼  사자 

// 자식 -> 부모 ==> UpCasting
// 토끼는 동물이다 -> O
// 사자는 동물이다 -> O

// 부모 객체 => 자식 클래스 ==> DownCasting -> 스프링 프레임워크에서는 다운캐스트 지양 
// 동물은 사자다 -> X
// 이 동물은 사자다. -> O

public class Animal {  // =>  추상화의 대상.
	// public - protected - default - private 
	private String name;
	private Integer age;
	
	public void sleep() {
		System.out.println("잠을 잡니다.");
	}

	public void eat() {
		System.out.println("밥을 먹어.");
	}
	
}
